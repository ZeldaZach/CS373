#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
theorems-ams-bytype
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Zachary Halpern â€“ Homework #9
\end_layout

\begin_layout Example*
(1) Let 
\begin_inset Formula $Some_{DFA}=\{<A>|A-DFA,L(A)\not=\emptyset,L(A)\not=\Sigma^{*}\}$
\end_inset

.
 Show that 
\begin_inset Formula $Some_{DFA}$
\end_inset

 is decidable.
 
\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <A,w> where A is a DFA and w is a string:
\end_layout

\begin_layout Proof
1) Simulate 
\begin_inset Formula $A^{C}$
\end_inset

 on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{DFA}.$
\end_inset


\end_layout

\begin_layout Proof
2) If T accepts, then we know A is an infinite language and we shoud reject.
\end_layout

\begin_layout Proof
3) If T rejects, then we know that L(A) is not empty and we can continue.
\end_layout

\begin_layout Proof
4) Simulate A on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{DFA}.$
\end_inset

 
\end_layout

\begin_layout Proof
5) If T accepts, then we know A is an empty language and we should reject.
\end_layout

\begin_layout Proof
6) If T rejects, the nwe know that L(A) is not infinite and we should accept.
\end_layout

\begin_layout Example*
(2) Let 
\begin_inset Formula $Alot_{RE}=\{<A>|A-RE,L(A)=infinite\}$
\end_inset

.
 Show that 
\begin_inset Formula $Alot_{RE}$
\end_inset

 is decidable.
\end_layout

\begin_layout Proof
(NOTE: DFA w/ m states accepts inf number of strings <=> accepts string
 w/ length in interval [m, 2m))
\end_layout

\begin_layout Proof
Define TM M such that:
\end_layout

\begin_layout Proof
On input <A>:
\end_layout

\begin_layout Proof
Construct NFA N st L(N) = L(A).
\end_layout

\begin_layout Proof
Construct DFA D st L(D) = L(N) = L(A).
\end_layout

\begin_layout Proof
Run DFA on all strings of length n.
 N >= # of states in D && < 2n states.
\end_layout

\begin_layout Proof
If D accepts a string, H&A.
 Otherwise H&R.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <A,w> where A is a RE and w is a string:
\end_layout

\begin_layout Proof
1) We can convert A to an NFA, A'.
\end_layout

\begin_layout Proof
2) We can now simulate 
\begin_inset Formula $(A')^{C}$
\end_inset

 on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{NFA}.$
\end_inset


\end_layout

\begin_layout Proof
3) If T accepts, accept.
 If T rejects, reject.
\end_layout

\begin_layout Example*
(3) Let 
\begin_inset Formula $Complimentary_{RE,DFA}=\{<A,B>|A-RE,B-DFA,$
\end_inset

 
\begin_inset Formula $L(A)\cup L(B)=\Sigma^{*},L(A)\cap L(B)=\emptyset\}$
\end_inset

.
 Show that 
\begin_inset Formula $Complimentary_{RE,DFA}$
\end_inset

 is decidable.
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
Construct TM M st:
\end_layout

\begin_layout Proof
(If we can construct DFA that represents L(A) U L(B), can use ALLDFA problem
\end_layout

\begin_layout Proof
If we construct DFA that represents L(A) int L(B) can use ALLRE problem.)
\end_layout

\begin_layout Proof
TM must change RE A into DFA (RE -> NFA -> DFA) D
\end_layout

\begin_layout Proof
Construct DFA to recognize L(D) U L(B)
\end_layout

\begin_layout Proof
Construct DFA that recognises L(D) int L(B) calling it I.
\end_layout

\begin_layout Proof
EDFA(I) should be true.
\end_layout

\begin_layout Proof
On input <A,B>:
\end_layout

\begin_layout Proof
Construct NFA, construct DFA from that NFA.
\end_layout

\begin_layout Proof
Construct DFA U, L(U) = L(D) U L(B)
\end_layout

\begin_layout Proof
Construct DFA I, L(I) = L(D) int L(B)
\end_layout

\begin_layout Proof
Simulate TM that decide AllDFA and Edfa with inputs <U>, and <I> respectively.
\end_layout

\begin_layout Proof
If both accept, H&A.
 Otherwise H&R.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <A,B>:
\end_layout

\begin_layout Proof
1) Convert A into an NFA A' then into a DFA A'' such that L(A)=L(A')=L(A'').
\end_layout

\begin_layout Proof
2) Create a DFA, C, such that 
\begin_inset Formula $L(C)=L(A)\cap L(B).$
\end_inset


\end_layout

\begin_layout Proof
3) Simulate C on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{DFA}$
\end_inset

.
\end_layout

\begin_layout Proof
4) If T accepts, we know the language is empty and can continue.
\end_layout

\begin_layout Proof
5) If T rejects, then we know the language is not empty and should reject.
\end_layout

\begin_layout Proof
6) Create a DFA, D, such that 
\begin_inset Formula $L(D)=L(A)\cup L(B).$
\end_inset


\end_layout

\begin_layout Proof
7) Simulate 
\begin_inset Formula $D^{C}$
\end_inset

 on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{DFA}$
\end_inset

.
\end_layout

\begin_layout Proof
8) If T accepts, then we know D is the infinite language and we should accept.
\end_layout

\begin_layout Proof
9) If T rejects, then we know that D is not the infinite language and we
 should reject.
\end_layout

\begin_layout Example*
(4) 4.3: Let 
\begin_inset Formula $ALL_{DFA}=\{<A>|A-DFA,L(A)=\Sigma^{*}\}.$
\end_inset

 Show 
\begin_inset Formula $ALL_{DFA}$
\end_inset

 is decidable.
\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <B,w> where B is a DFA and w is a string:
\end_layout

\begin_layout Proof
1) Simulate 
\begin_inset Formula $B^{C}$
\end_inset

 on w on a TM, T, that is a decider for 
\begin_inset Formula $E_{DFA}.$
\end_inset

 
\end_layout

\begin_layout Proof
2) If T accepts, then accept.
\end_layout

\begin_layout Proof
3) If T rejects, then reject.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $L(B)=\Sigma^{*}\Rightarrow L(B^{C})=\emptyset$
\end_inset

.
 If we can decide for the compliment, then we can decide for the original.
\end_layout

\begin_layout Example*
(5) Let 
\begin_inset Formula $N_{\epsilon CFG}=\{<G>|G-CFG,G$
\end_inset

 does not generate 
\begin_inset Formula $\epsilon\}.$
\end_inset

 Show that 
\begin_inset Formula $N_{\epsilon CFG}$
\end_inset

 is decidable.
\end_layout

\begin_layout Proof
Define TM M st:
\end_layout

\begin_layout Proof
On input <G>, M will:
\end_layout

\begin_layout Proof
1) Construct CFG G' in CNF with L(G') = L(G)
\end_layout

\begin_layout Proof
2) If the rules of G' include 
\begin_inset Quotes eld
\end_inset

S->e
\begin_inset Quotes erd
\end_inset

 then H&R.
\end_layout

\begin_layout Proof
3) H&A.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <G,w> where G is a CFG and w is a string:
\end_layout

\begin_layout Proof
1) Create a new CFG, G', such that G' will only generate 
\begin_inset Formula $\epsilon$
\end_inset

through its rules.
\end_layout

\begin_layout Proof
2) Run 
\begin_inset Formula $<G,(G')^{C}>$
\end_inset

 on a TM, E, that decides 
\begin_inset Formula $EQ_{CFG}$
\end_inset

.
\end_layout

\begin_layout Proof
3) If E accepts, then accept.
\end_layout

\begin_layout Proof
4) If E rejects, then reject.
\end_layout

\begin_layout Example*
(6) 4.6b,c,e,f: Let X be the set {1,2,3,4,5} and Y be the set {6,7,8,9,10}.
 We describe the functions 
\begin_inset Formula $f:X\to Y$
\end_inset

 and 
\begin_inset Formula $g:X\to Y$
\end_inset

 in the following tables.
 Answer each part and give a reason for each negative answer.
\end_layout

\begin_layout Example*
b) Is f onto?
\end_layout

\begin_layout Example*
c) Is f a correspondance (1-1 & onto)?
\end_layout

\begin_layout Example*
e) Is g onto?
\end_layout

\begin_layout Example*
f) Is g a correspondance (1-1 & onto)?
\end_layout

\begin_layout Proof
b) F is NOT an onto function as each value of Y is not reachable through
 a transition from X.
 The values 8,9, and 10 are never reached for any value in set X.
\end_layout

\begin_layout Proof
c) F is NOT a 1-1 correspondance as the funtion is not 1-1 nor onto.
 The set is not 1-1 because, for example, the values 1,3, and 5 all map
 to the same number in Y, so we cannot make a direct transition from Y->X
 since we don't know which value in X originally generated it.
 The set is not not onto for reasons in b.
\end_layout

\begin_layout Proof
e) G is an onto function as each value within the set X is used and reaches
 every value in the set Y.
\end_layout

\begin_layout Proof
f) G is a 1-1 correspondance as each value in X is uniquely mapped onto
 a value in G, so we can start in either set and get the corresponding value
 in the other set for all values in each set.
\end_layout

\begin_layout Example*
(7) Let 
\begin_inset Formula $U=\{<A,B,C>|A,B,C-DFA,|L(A)|=|L(B)|+|L(C)|\}.$
\end_inset

 Show that U is decidable.
\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <A,B,C>:
\end_layout

\begin_layout Proof
1) Let A, B, and C be DFAs which have languages defined in the following
 ways:
\end_layout

\begin_layout Proof
\begin_inset Formula $L(A)={\{1,2,3,...,|A|\}}$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $L(B)=\{{|A|+1,|A|+2,...,|A|+|B|}\}$
\end_inset


\end_layout

\begin_layout Proof
\begin_inset Formula $L(C)={\{|B|+1,|B|+2,...,|B|+|C|\}}$
\end_inset


\end_layout

\begin_layout Proof
2) Create a new DFA, D, that contains all numbers in in the languages of
 B and C, that is 
\begin_inset Formula $L(D)={\{|A|+1,|A|+2,...,|A|+|B|,|B|+1|,|B+2|,...,|B|+|C|\}}$
\end_inset


\end_layout

\begin_layout Proof
3) Create a new DFA, E, that's language is defined as the downshift of the
 elements from DFA D to start at the beginning of the naturals instead of
 where it was (i.e.
 if the first element was 5, then apply -4 to all elements in the language).
\end_layout

\begin_layout Proof
\begin_inset Formula $L(E)=\{1,2,3,...,|B+C|\}$
\end_inset


\end_layout

\begin_layout Proof
4) Run <A,E> on a TM, T, that simualates 
\begin_inset Formula $EQ_{DFA}$
\end_inset

.
\end_layout

\begin_layout Proof
5) If T accepts, then accept.
\end_layout

\begin_layout Proof
6) If T rejects, then reject.
\end_layout

\begin_layout Example*
(8) 4.16: Let 
\begin_inset Formula $A=\{<R>|R-RE$
\end_inset

 describing a language containing at least one string, w, st 
\begin_inset Formula $w=x111y$
\end_inset

 for some x and y)}.
 Show that A is decidable.
\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <R>:
\end_layout

\begin_layout Proof
1) Construct a RE, T, that accepts all strings that contain the substring
 111.
\end_layout

\begin_layout Proof
2) Test if L(T) = L(R) using the following decider:
\end_layout

\begin_layout Proof
Decider: On input <A,B> where A,B are RE:
\end_layout

\begin_layout Proof
a) Convert A to a NFA A' then into a DFA A'' such that L(A)=L(A')=L(A'').
\end_layout

\begin_layout Proof
b) Convert B into NFA B' then into a DFA B'' such that L(B)=L(B')=L(B'').
\end_layout

\begin_layout Proof
c) Test if L(A'') = L(B'') using the 
\begin_inset Formula $EQ_{DFA}$
\end_inset

 decider.
\end_layout

\begin_layout Proof
d) If 
\begin_inset Formula $EQ_{DFA}$
\end_inset

 acepts, then accept.
 If it rejects, then reject.
\end_layout

\begin_layout Example*
(9) Let 
\begin_inset Formula $E_{PDA}=\{<P>|P-PDA,L(P)=\emptyset\}.$
\end_inset

 Show 
\begin_inset Formula $E_{PDA}$
\end_inset

 is decidable.
\end_layout

\begin_layout Proof
We can construct a TM M such that:
\end_layout

\begin_layout Proof
On input <P>:
\end_layout

\begin_layout Proof
1) Convert P to a CFG G such that L(P)=L(G).
\end_layout

\begin_layout Proof
2) Run G on a TM that decides 
\begin_inset Formula $E_{CFG}.$
\end_inset


\end_layout

\begin_layout Proof
3) If that TM accepts, then accept.
\end_layout

\begin_layout Proof
4) If that TM rejects, then reject.
\end_layout

\begin_layout Example*
(10) 4.24: A useless state in a PDA is never entered on any input string.
 Consider the problem of determining whether a PDA has any useless states.
 Formulate this problem as a language and show that it is decidable.
\end_layout

\begin_layout Proof
Let P be the set of all pushdown automatas.
 Let the language 
\begin_inset Formula $U=\{x\in P|x$
\end_inset

 has a useless state}.
 To show that U is decidable, we can design a TM that accepts only the strings
 of U.
 We know that 
\begin_inset Formula $E_{PDA}$
\end_inset

 is decidable.
 We can now change the question to see whether a given state, q, is a useless
 one by making q the only accept state and determining if the PDA has an
 empty language.
 If this new PDA has an empty language, then we know q is a useless state.
 Our TM therefore can solve the question for any useless states.
\end_layout

\end_body
\end_document
